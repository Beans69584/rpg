{
  "api/RPG.ColoredText.html": {
    "href": "api/RPG.ColoredText.html",
    "title": "Struct ColoredText | Your Documentation",
    "keywords": "Struct ColoredText Namespace RPG Assembly RPG.dll Represents a colored text entry in the game log. public record struct ColoredText : IEquatable<ColoredText> Implements IEquatable<ColoredText> Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Constructors ColoredText(string, ConsoleColor) Represents a colored text entry in the game log. public ColoredText(string Text, ConsoleColor Color = ConsoleColor.Gray) Parameters Text string Color ConsoleColor Properties Color public ConsoleColor Color { readonly get; set; } Property Value ConsoleColor Text public string Text { readonly get; set; } Property Value string Operators implicit operator ColoredText(string) Implicitly converts a string to ColoredText with default color. public static implicit operator ColoredText(string text) Parameters text string The text to convert. Returns ColoredText"
  },
  "api/RPG.CommandHandler.html": {
    "href": "api/RPG.CommandHandler.html",
    "title": "Class CommandHandler | Your Documentation",
    "keywords": "Class CommandHandler Namespace RPG Assembly RPG.dll Handles commands for the game. public class CommandHandler Inheritance object CommandHandler Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors CommandHandler() Initializes a new instance of the CommandHandler class. public CommandHandler() Properties InputHandler Gets or sets the current input handler. public Action<string> InputHandler { get; set; } Property Value Action<string> Methods ExecuteCommand(string, GameState) Executes a command with the given input and game state. public bool ExecuteCommand(string input, GameState state) Parameters input string The input string to parse and execute. state GameState The current game state. Returns bool True if the command was executed successfully, otherwise false. GetCommands() Gets a list of all registered commands. public IEnumerable<ICommand> GetCommands() Returns IEnumerable<ICommand> A list of all registered commands. ProcessInput(string) Processes the given input string using the current input handler. public void ProcessInput(string input) Parameters input string The input string to process. RegisterCommand(ICommand) Registers a command with the command handler. public void RegisterCommand(ICommand command) Parameters command ICommand The command to register."
  },
  "api/RPG.Commands.BaseCommand.html": {
    "href": "api/RPG.Commands.BaseCommand.html",
    "title": "Class BaseCommand | Your Documentation",
    "keywords": "Class BaseCommand Namespace RPG.Commands Assembly RPG.dll Represents a command that can be executed by the player. public abstract class BaseCommand : ICommand Inheritance object BaseCommand Implements ICommand Derived HelpCommand LoadCommand LuaCommand SaveCommand Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties Aliases Gets a list of aliases for the command. public virtual string[] Aliases { get; } Property Value string[] Description Gets a brief description of the command. public abstract string Description { get; } Property Value string Name Gets the name of the command. public abstract string Name { get; } Property Value string Methods Execute(string, GameState) Executes the command with the specified arguments and game state. public abstract void Execute(string args, GameState state) Parameters args string The arguments for the command. state GameState The current game state."
  },
  "api/RPG.Commands.HelpCommand.html": {
    "href": "api/RPG.Commands.HelpCommand.html",
    "title": "Class HelpCommand | Your Documentation",
    "keywords": "Class HelpCommand Namespace RPG.Commands Assembly RPG.dll Built-in command that shows a list of available commands. public class HelpCommand : BaseCommand, ICommand Inheritance object BaseCommand HelpCommand Implements ICommand Inherited Members BaseCommand.Aliases object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors HelpCommand(CommandHandler) Built-in command that shows a list of available commands. public HelpCommand(CommandHandler commandHandler) Parameters commandHandler CommandHandler The command handler to use. Properties Description Sets the description of the command. public override string Description { get; } Property Value string Name Sets the name of the command. public override string Name { get; } Property Value string Methods Execute(string, GameState) Executes the command with the specified arguments and game state. public override void Execute(string args, GameState state) Parameters args string The arguments for the command. state GameState The current game state."
  },
  "api/RPG.Commands.ICommand.html": {
    "href": "api/RPG.Commands.ICommand.html",
    "title": "Interface ICommand | Your Documentation",
    "keywords": "Interface ICommand Namespace RPG.Commands Assembly RPG.dll Interface implemented by all commands. public interface ICommand Properties Aliases Gets a list of aliases for the command. string[] Aliases { get; } Property Value string[] Description Gets a brief description of the command. string Description { get; } Property Value string Name Gets the name of the command. string Name { get; } Property Value string Methods Execute(string, GameState) Executes the command with the specified arguments and game state. void Execute(string args, GameState state) Parameters args string The arguments for the command. state GameState The current game state."
  },
  "api/RPG.Commands.LoadCommand.html": {
    "href": "api/RPG.Commands.LoadCommand.html",
    "title": "Class LoadCommand | Your Documentation",
    "keywords": "Class LoadCommand Namespace RPG.Commands Assembly RPG.dll Command that loads a game from a save slot. public class LoadCommand : BaseCommand, ICommand Inheritance object BaseCommand LoadCommand Implements ICommand Inherited Members BaseCommand.Aliases object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties Description Sets the description of the command. public override string Description { get; } Property Value string Name Sets the name of the command. public override string Name { get; } Property Value string Methods Execute(string, GameState) Executes the command with the specified arguments and game state. public override void Execute(string args, GameState state) Parameters args string The arguments for the command. state GameState The current game state."
  },
  "api/RPG.Commands.LocationWrapper.html": {
    "href": "api/RPG.Commands.LocationWrapper.html",
    "title": "Class LocationWrapper | Your Documentation",
    "keywords": "Class LocationWrapper Namespace RPG.Commands Assembly RPG.dll Wrapper for lua commands to access the world state. public class LocationWrapper Inheritance object LocationWrapper Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Remarks Initialises a new instance of the LocationWrapper class. Constructors LocationWrapper(Location, WorldLoader) Wrapper for lua commands to access the world state. public LocationWrapper(Location location, WorldLoader world) Parameters location Location The location to wrap. world WorldLoader The world loader to use. Remarks Initialises a new instance of the LocationWrapper class. Properties Description Gets a brief description of the location. public string Description { get; } Property Value string Location Gets the location. public Location Location { get; } Property Value Location Name Gets the name of the location. public string Name { get; } Property Value string Type Gets the type of the location. public string Type { get; } Property Value string"
  },
  "api/RPG.Commands.LuaCommand.html": {
    "href": "api/RPG.Commands.LuaCommand.html",
    "title": "Class LuaCommand | Your Documentation",
    "keywords": "Class LuaCommand Namespace RPG.Commands Assembly RPG.dll Represents a lua command that can be executed by the player. public class LuaCommand : BaseCommand, ICommand Inheritance object BaseCommand LuaCommand Implements ICommand Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Remarks Initialises a new instance of the LuaCommand class. Constructors LuaCommand(string, string, LuaFunction, string[], string, string) Represents a lua command that can be executed by the player. public LuaCommand(string name, string description, LuaFunction executeFunction, string[] aliases, string usage, string category) Parameters name string The name of the command. description string A brief description of the command. executeFunction LuaFunction The function to execute when the command is run. aliases string[] A list of aliases for the command. usage string A brief description of how to use the command. category string The category of the command. Remarks Initialises a new instance of the LuaCommand class. Properties Aliases Gets a list of aliases for the command. public override string[] Aliases { get; } Property Value string[] Category Gets the category of the command. public string Category { get; } Property Value string Description Gets a brief description of the command. public override string Description { get; } Property Value string Name Gets the name of the command. public override string Name { get; } Property Value string Usage Gets a brief description of how to use the command. public string Usage { get; } Property Value string Methods Execute(string, GameState) Executes the command with the specified arguments and game state. public override void Execute(string args, GameState state) Parameters args string The arguments for the command. state GameState The current game state."
  },
  "api/RPG.Commands.LuaCommandLoader.html": {
    "href": "api/RPG.Commands.LuaCommandLoader.html",
    "title": "Class LuaCommandLoader | Your Documentation",
    "keywords": "Class LuaCommandLoader Namespace RPG.Commands Assembly RPG.dll Lua command loader, in charge of loading user and system commands from Lua scripts. public class LuaCommandLoader Inheritance object LuaCommandLoader Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors LuaCommandLoader(GameState) Initialises a new instance of the LuaCommandLoader class. public LuaCommandLoader(GameState state) Parameters state GameState The current game state. Methods LoadCommands() Loads all available commands from embedded and user scripts. public IEnumerable<ICommand> LoadCommands() Returns IEnumerable<ICommand> An enumerable collection of commands."
  },
  "api/RPG.Commands.LuaGameApi.html": {
    "href": "api/RPG.Commands.LuaGameApi.html",
    "title": "Class LuaGameApi | Your Documentation",
    "keywords": "Class LuaGameApi Namespace RPG.Commands Assembly RPG.dll Represents a Lua game API that abstracts game state and provides helper methods for Lua scripts. public class LuaGameApi Inheritance object LuaGameApi Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Remarks Initialises a new instance of the LuaGameApi class. Constructors LuaGameApi(GameState, Lua) Represents a Lua game API that abstracts game state and provides helper methods for Lua scripts. public LuaGameApi(GameState state, Lua lua) Parameters state GameState The current game state. lua Lua The Lua interpreter to use. Remarks Initialises a new instance of the LuaGameApi class. Methods AskQuestion(string) Asks the player a question and waits for their response. public string AskQuestion(string question) Parameters question string The question to ask the player. Returns string The player's answer. CalculateTravelTime(RegionWrapper, RegionWrapper) Calculates the travel time between two regions in minutes. public int CalculateTravelTime(RegionWrapper from, RegionWrapper to) Parameters from RegionWrapper The starting region. to RegionWrapper The destination region. Returns int The travel time in minutes. ClearLog() Clears the game log. public void ClearLog() GetConnectedRegions() Gets the connected regions to the current region. public LuaTable GetConnectedRegions() Returns LuaTable A table of connected regions. GetConnectedRegions(WorldRegion) Gets the connected regions to a specified region. public LuaTable? GetConnectedRegions(WorldRegion region) Parameters region WorldRegion The region to get connected regions for. Returns LuaTable A table of connected regions. GetCurrentLocation() Navigates to a region. public LocationWrapper? GetCurrentLocation() Returns LocationWrapper The region to navigate to. GetCurrentRegion() Checks if a region name matches. public RegionWrapper? GetCurrentRegion() Returns RegionWrapper True if the names match, false otherwise. GetDistanceBetweenRegions(RegionWrapper, RegionWrapper) Gets the distance between two regions. public static double GetDistanceBetweenRegions(RegionWrapper from, RegionWrapper to) Parameters from RegionWrapper The starting region. to RegionWrapper The destination region. Returns double The distance between the regions. GetLocationsInRegion() Gets the locations in the current region. public LuaTable GetLocationsInRegion() Returns LuaTable A table of locations in the current region. GetPlayerHP() Gets the player's health points. public int GetPlayerHP() Returns int GetPlayerLevel() Gets the player's level. public int GetPlayerLevel() Returns int The player's level. GetPlayerMaxHP() Gets the player's maximum health points. public int GetPlayerMaxHP() Returns int The player's maximum health points. GetPlayerName() Gets the player's name. public string GetPlayerName() Returns string GetRandomNumber(int, int) Gets the player's experience points. public static int GetRandomNumber(int min, int max) Parameters min int The minimum value of the random number. max int The maximum value of the random number. Returns int A random number between the specified range. GetRegionDescription(WorldRegion) Gets the player's experience points. public string GetRegionDescription(WorldRegion region) Parameters region WorldRegion The region to get the description of. Returns string The description of the region. GetRegionName(WorldRegion) Gets the player's experience points. public string GetRegionName(WorldRegion region) Parameters region WorldRegion The region to get the name of. Returns string The name of the region. GetRegionPosition(RegionWrapper) Gets the position of a region. public static Vector2 GetRegionPosition(RegionWrapper region) Parameters region RegionWrapper The region to get the position of. Returns Vector2 The position of the region. LocationNameMatches(LocationWrapper, string) Checks if a location name matches. public static bool LocationNameMatches(LocationWrapper location, string name) Parameters location LocationWrapper The location to check. name string The name to check against. Returns bool True if the names match, false otherwise. Log(string) Logs a message to the game log. public void Log(string message) Parameters message string The message to log. LogColor(string, string) Logs a message to the game log with a specified color. public void LogColor(string message, string color) Parameters message string The message to log. color string The color name (e.g., \"red\", \"blue\", \"green\", etc.) NavigateToLocation(LocationWrapper) Navigates to a region. public void NavigateToLocation(LocationWrapper location) Parameters location LocationWrapper The location to navigate to. RegionNameMatches(RegionWrapper, string) Checks if a region name matches. public static bool RegionNameMatches(RegionWrapper region, string name) Parameters region RegionWrapper The region to check. name string The name to check against. Returns bool True if the names match, false otherwise. RollDice(int) Gets the player's experience points. public static bool RollDice(int sides) Parameters sides int The number of sides on the dice. Returns bool True if the dice roll is successful, false otherwise. SetCurrentLocation(LocationWrapper) Sets the current location. public void SetCurrentLocation(LocationWrapper location) Parameters location LocationWrapper The location to set. SetCurrentRegion(RegionWrapper) Sets the current region. public void SetCurrentRegion(RegionWrapper region) Parameters region RegionWrapper The region to set. SetPlayerHP(int) Sets the player's health points. public void SetPlayerHP(int hp) Parameters hp int SetPlayerLevel(int) Sets the player's level. public void SetPlayerLevel(int level) Parameters level int The level to set. SetPlayerMaxHP(int) Sets the player's maximum health points. public void SetPlayerMaxHP(int maxHp) Parameters maxHp int The maximum health points to set. SetPlayerName(string) Sets the player's name. public void SetPlayerName(string name) Parameters name string SimulateTravelTime(int) Simulates travel time in minutes. public static void SimulateTravelTime(int minutes) Parameters minutes int SimulateTravelTimeWithProgress(int, float) Simulates travel time with a progress bar. public void SimulateTravelTimeWithProgress(int totalMinutes, float timeScale = 0.1) Parameters totalMinutes int The total travel time in minutes. timeScale float The time scale to use (default is 0.1). Sleep(int) Gets the player's experience points. public static void Sleep(int milliseconds) Parameters milliseconds int The number of milliseconds to sleep."
  },
  "api/RPG.Commands.LuaTableExtensions.html": {
    "href": "api/RPG.Commands.LuaTableExtensions.html",
    "title": "Class LuaTableExtensions | Your Documentation",
    "keywords": "Class LuaTableExtensions Namespace RPG.Commands Assembly RPG.dll Extension methods for lua tables. public static class LuaTableExtensions Inheritance object LuaTableExtensions Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods ToLuaTable(IEnumerable<LocationWrapper>, Lua) Converts a list of location wrappers to a lua table. public static LuaTable? ToLuaTable(this IEnumerable<LocationWrapper> items, Lua lua) Parameters items IEnumerable<LocationWrapper> The items to convert. lua Lua The lua instance to use. Returns LuaTable The lua table. ToLuaTable(IEnumerable<RegionWrapper>, Lua) Converts a list of region wrappers to a lua table. public static LuaTable? ToLuaTable(this IEnumerable<RegionWrapper> items, Lua lua) Parameters items IEnumerable<RegionWrapper> The items to convert. lua Lua The lua instance to use. Returns LuaTable The lua table."
  },
  "api/RPG.Commands.RegionWrapper.html": {
    "href": "api/RPG.Commands.RegionWrapper.html",
    "title": "Class RegionWrapper | Your Documentation",
    "keywords": "Class RegionWrapper Namespace RPG.Commands Assembly RPG.dll Wrapper for lua commands to access the world state. public class RegionWrapper Inheritance object RegionWrapper Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Remarks Initialises a new instance of the RegionWrapper class. Constructors RegionWrapper(WorldRegion, WorldLoader) Wrapper for lua commands to access the world state. public RegionWrapper(WorldRegion region, WorldLoader world) Parameters region WorldRegion The region to wrap. world WorldLoader The world loader to use. Remarks Initialises a new instance of the RegionWrapper class. Properties Description Gets a brief description of the region. public string Description { get; } Property Value string Name Gets the name of the region. public string Name { get; } Property Value string Region Gets the region. public WorldRegion Region { get; } Property Value WorldRegion"
  },
  "api/RPG.Commands.SaveCommand.html": {
    "href": "api/RPG.Commands.SaveCommand.html",
    "title": "Class SaveCommand | Your Documentation",
    "keywords": "Class SaveCommand Namespace RPG.Commands Assembly RPG.dll Built-in command that saves the game to a save slot. public class SaveCommand : BaseCommand, ICommand Inheritance object BaseCommand SaveCommand Implements ICommand Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties Aliases Gets a list of aliases for the command. public override string[] Aliases { get; } Property Value string[] Description Gets the description of the command. public override string Description { get; } Property Value string Name Gets the name of the command. public override string Name { get; } Property Value string Methods Execute(string, GameState) Executes the command with the specified arguments and game state. public override void Execute(string args, GameState state) Parameters args string The arguments for the command. state GameState The current game state."
  },
  "api/RPG.Commands.html": {
    "href": "api/RPG.Commands.html",
    "title": "Namespace RPG.Commands | Your Documentation",
    "keywords": "Namespace RPG.Commands Classes BaseCommand Represents a command that can be executed by the player. HelpCommand Built-in command that shows a list of available commands. LoadCommand Command that loads a game from a save slot. LocationWrapper Wrapper for lua commands to access the world state. LuaCommand Represents a lua command that can be executed by the player. LuaCommandLoader Lua command loader, in charge of loading user and system commands from Lua scripts. LuaGameApi Represents a Lua game API that abstracts game state and provides helper methods for Lua scripts. LuaTableExtensions Extension methods for lua tables. RegionWrapper Wrapper for lua commands to access the world state. SaveCommand Built-in command that saves the game to a save slot. Interfaces ICommand Interface implemented by all commands."
  },
  "api/RPG.ConsoleBuffer.html": {
    "href": "api/RPG.ConsoleBuffer.html",
    "title": "Class ConsoleBuffer | Your Documentation",
    "keywords": "Class ConsoleBuffer Namespace RPG Assembly RPG.dll Represents a buffer for managing console output with character and color information. public class ConsoleBuffer Inheritance object ConsoleBuffer Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors ConsoleBuffer(int, int) Initializes a new instance of the ConsoleBuffer class with specified dimensions. public ConsoleBuffer(int width, int height) Parameters width int The width of the buffer in characters. height int The height of the buffer in characters. Properties Height Gets the height of the console buffer in characters. public int Height { get; } Property Value int Width Gets the width of the console buffer in characters. public int Width { get; } Property Value int Methods Clear() Clears the console buffer by filling it with spaces and default colors. public void Clear() Flush() Flushes the console buffer to the console window. public void Flush() GetChar(int, int) Gets the character at the specified position in the buffer. public char GetChar(int x, int y) Parameters x int The X-coordinate of the character. y int The Y-coordinate of the character. Returns char Resize(int, int) Resizes the console buffer to the specified dimensions. public void Resize(int newWidth, int newHeight) Parameters newWidth int The new width of the buffer in characters. newHeight int The new height of the buffer in characters. SetChar(int, int, char, ConsoleColor) Sets the character and color at the specified position in the buffer. public void SetChar(int x, int y, char c, ConsoleColor color) Parameters x int The X-coordinate of the character. y int The Y-coordinate of the character. c char The character to set. color ConsoleColor The color to set. WriteString(int, int, string, ConsoleColor) Writes a string public void WriteString(int x, int y, string text, ConsoleColor color) Parameters x int The X-coordinate of the start of the string. y int The Y-coordinate of the start of the string. text string The text to write. color ConsoleColor The color to set."
  },
  "api/RPG.ConsoleDisplayConfig.html": {
    "href": "api/RPG.ConsoleDisplayConfig.html",
    "title": "Class ConsoleDisplayConfig | Your Documentation",
    "keywords": "Class ConsoleDisplayConfig Namespace RPG Assembly RPG.dll Configuration for ConsoleWindowManager display settings. public class ConsoleDisplayConfig Inheritance object ConsoleDisplayConfig Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties CursorBlinkRateMs The cursor blink rate, in milliseconds. public int CursorBlinkRateMs { get; set; } Property Value int EnableCursorBlink Whether to enable cursor blinking. public bool EnableCursorBlink { get; set; } Property Value bool RefreshRateMs The refresh rate for the console display, in milliseconds. public int RefreshRateMs { get; set; } Property Value int UseBold Whether to use bold text in the console display. public bool UseBold { get; set; } Property Value bool UseColors Whether to use colors in the console display. public bool UseColors { get; set; } Property Value bool UseCurvedBorders Whether to use curved borders in the console display. public bool UseCurvedBorders { get; set; } Property Value bool UseUnicodeBorders Whether to use Unicode box-drawing characters for borders. public bool UseUnicodeBorders { get; set; } Property Value bool"
  },
  "api/RPG.ConsoleWindowManager.html": {
    "href": "api/RPG.ConsoleWindowManager.html",
    "title": "Class ConsoleWindowManager | Your Documentation",
    "keywords": "Class ConsoleWindowManager Namespace RPG Assembly RPG.dll Represents a region within a console window that can display content with borders and titles. public class ConsoleWindowManager : IDisposable Inheritance object ConsoleWindowManager Implements IDisposable Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors ConsoleWindowManager() Initialises a new instance of the ConsoleWindowManager class. public ConsoleWindowManager() Methods AddRegion(string, Region) Adds a new region to the console window manager with the specified name. public void AddRegion(string name, Region region) Parameters name string Name of the region. region Region Region to add. CheckResize() Checks if the console window has been resized and updates the buffer if needed. public bool CheckResize() Returns bool True if the console window was resized; otherwise, false. ClearDisplay() Cleans up the console display public void ClearDisplay() Dispose() Releases all resources used by the ConsoleWindowManager. public void Dispose() Dispose(bool) Releases the unmanaged resources used by the ConsoleWindowManager and optionally releases the managed resources. protected virtual void Dispose(bool disposing) Parameters disposing bool true to release both managed and unmanaged resources; false to release only unmanaged resources. DisposeAsync() Releases all resources used by the ConsoleWindowManager. public ValueTask DisposeAsync() Returns ValueTask GetRegions() Gets the current regions dictionary. public Dictionary<string, Region> GetRegions() Returns Dictionary<string, Region> IsDoubleWidth(char) Determines if a character is double-width based on Unicode character ranges. public static bool IsDoubleWidth(char c) Parameters c char The character to check. Returns bool True if the character is double-width; otherwise, false. QueueRender() Queues a region to be rendered on the next update. public void QueueRender() RemoveRegion(string) Removes a region from the window manager. public void RemoveRegion(string name) Parameters name string The name of the region to remove. RenderMap(Region, WorldData, WorldRegion) Renders a map of the world to the specified region. public void RenderMap(Region region, WorldData world, WorldRegion currentRegion) Parameters region Region The region to render the map to. world WorldData The world data to render. currentRegion WorldRegion The current region to highlight on the map. RenderRegionMap(Region, WorldRegion) Renders a map of the specified region to the console buffer. public void RenderRegionMap(Region region, WorldRegion currentRegion) Parameters region Region The region to render the map to. currentRegion WorldRegion The current region to highlight on the map. RenderWrappedText(Region, IEnumerable<ColoredText>) Renders a list of lines of text to the specified region, wrapping long lines as needed. public void RenderWrappedText(Region region, IEnumerable<ColoredText> lines) Parameters region Region The region to render the text to. lines IEnumerable<ColoredText> The lines of text to render. UpdateDisplaySettings(ConsoleDisplayConfig) Updates the display settings for the console window manager. public void UpdateDisplaySettings(ConsoleDisplayConfig newConfig) Parameters newConfig ConsoleDisplayConfig The new display settings to apply. UpdateInputText(string, ConsoleColor) Updates the input text displayed in the input region. public void UpdateInputText(string text, ConsoleColor color) Parameters text string The new input text to display. color ConsoleColor The color to use for the input text. UpdateRegion(string, Action<Region>) Updates an existing region in the console window manager. public void UpdateRegion(string name, Action<Region> updateAction) Parameters name string Name of the region to update. updateAction Action<Region> Action to perform on the region before removal."
  },
  "api/RPG.Entity.html": {
    "href": "api/RPG.Entity.html",
    "title": "Class Entity | Your Documentation",
    "keywords": "Class Entity Namespace RPG Assembly RPG.dll Represents an entity in the game world, such as an NPC or creature. public class Entity Inheritance object Entity Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties DialogueRefs Gets or sets the list of dialogue reference IDs available to this entity. public List<int> DialogueRefs { get; set; } Property Value List<int> HP Gets or sets the current hit points of the entity. public int HP { get; set; } Property Value int Level Gets or sets the experience level of the entity. public int Level { get; set; } Property Value int NameId Gets or sets the ID reference to the entity's name in the string pool. public int NameId { get; set; } Property Value int Stats Gets or sets the base statistics for this entity. public EntityStats Stats { get; set; } Property Value EntityStats"
  },
  "api/RPG.EntityStats.html": {
    "href": "api/RPG.EntityStats.html",
    "title": "Class EntityStats | Your Documentation",
    "keywords": "Class EntityStats Namespace RPG Assembly RPG.dll Represents the base statistics for an entity in the game world. public class EntityStats Inheritance object EntityStats Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties Defense Gets or sets the damage resistance capability of the entity. public int Defense { get; set; } Property Value int Dexterity Gets or sets the agility and precision of the entity. public int Dexterity { get; set; } Property Value int Intelligence Gets or sets the mental capacity and magical ability of the entity. public int Intelligence { get; set; } Property Value int Strength Gets or sets the physical power and melee damage capability of the entity. public int Strength { get; set; } Property Value int"
  },
  "api/RPG.GameSettings.html": {
    "href": "api/RPG.GameSettings.html",
    "title": "Class GameSettings | Your Documentation",
    "keywords": "Class GameSettings Namespace RPG Assembly RPG.dll Game settings for the RPG game. public class GameSettings Inheritance object GameSettings Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Remarks Initializes a new instance of the GameSettings class. Constructors GameSettings() Game settings for the RPG game. [JsonConstructor] public GameSettings() Remarks Initializes a new instance of the GameSettings class. Properties CurrentLanguage Gets or sets the current language for the game. public static string CurrentLanguage { get; set; } Property Value string Display The display configuration for the game. public ConsoleDisplayConfig Display { get; set; } Property Value ConsoleDisplayConfig FullScreen Whether to run the game in full-screen mode. public bool FullScreen { get; set; } Property Value bool Instance Gets the singleton instance of the GameSettings class. public static GameSettings Instance { get; } Property Value GameSettings Language The language code for the game. public string Language { get; set; } Property Value string WindowHeight The height of the game window. public int WindowHeight { get; set; } Property Value int WindowWidth The width of the game window. public int WindowWidth { get; set; } Property Value int Methods Save() Saves the game settings to disk. public void Save() UpdateLanguage(string) Updates the language for the game settings. public void UpdateLanguage(string language) Parameters language string"
  },
  "api/RPG.GameState.html": {
    "href": "api/RPG.GameState.html",
    "title": "Class GameState | Your Documentation",
    "keywords": "Class GameState Namespace RPG Assembly RPG.dll Manages the state of the game world. public class GameState Inheritance object GameState Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors GameState(ConsoleWindowManager) Initialises a new instance of the GameState class. public GameState(ConsoleWindowManager manager) Parameters manager ConsoleWindowManager The console window manager to use. Properties CommandHandler The command handler for processing player input. public CommandHandler CommandHandler { get; } Property Value CommandHandler CurrentLocation The current location the player is in. public Location? CurrentLocation { get; set; } Property Value Location CurrentRegion The current region the player is in. public WorldRegion? CurrentRegion { get; set; } Property Value WorldRegion CurrentWorldPath The current world path of the game. public string CurrentWorldPath { get; } Property Value string GameFlags The game flags that are set during gameplay. public Dictionary<string, bool> GameFlags { get; } Property Value Dictionary<string, bool> GameLog Stores current GameLog to be displayed in the console. public List<ColoredText> GameLog { get; } Property Value List<ColoredText> Gold The amount of gold the player character has. public int Gold { get; set; } Property Value int HP The current health points of the player character. public int HP { get; set; } Property Value int Inventory The inventory of the player character. public List<string> Inventory { get; } Property Value List<string> Level The level of the player character. public int Level { get; set; } Property Value int Localization The localization manager for the game. public LocalizationManager Localization { get; } Property Value LocalizationManager MaxHP The maximum health points of the player character. public int MaxHP { get; set; } Property Value int PlayerName The name of the player character. public string PlayerName { get; set; } Property Value string Running Whether the game is running or not. public bool Running { get; set; } Property Value bool Stats The stats of the player character. public Dictionary<string, int> Stats { get; } Property Value Dictionary<string, int> WindowManager Manages the console window and input/output. public ConsoleWindowManager WindowManager { get; } Property Value ConsoleWindowManager World The world loader for the game. public WorldLoader? World { get; } Property Value WorldLoader Methods AddLogMessage(ColoredText) Adds a message to the game log. public void AddLogMessage(ColoredText message) Parameters message ColoredText The message to add. Can be string or ColoredText. LoadGame(string) Loads the game state from a save slot. public bool LoadGame(string slot) Parameters slot string The save slot to load from. Returns bool True if the game was loaded successfully, otherwise false. LoadWorld(string, bool) Loads a new game world from a file. public void LoadWorld(string worldPath, bool isNewGame = false) Parameters worldPath string The path to the world file. isNewGame bool Whether this is a new game or not. NavigateToLocation(Location) Navigates the player to a new location. public void NavigateToLocation(Location location) Parameters location Location The location to navigate to. SaveGame(string) Processes the player input and updates the game state. public void SaveGame(string slot) Parameters slot string The save slot to use."
  },
  "api/RPG.GenWorldRegion.html": {
    "href": "api/RPG.GenWorldRegion.html",
    "title": "Class GenWorldRegion | Your Documentation",
    "keywords": "Class GenWorldRegion Namespace RPG Assembly RPG.dll Represents a region in the generated world with its properties and connections. public class GenWorldRegion Inheritance object GenWorldRegion Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties Connections Gets or sets the list of indices referencing connected regions. public List<int> Connections { get; set; } Property Value List<int> DescriptionId Gets or sets the ID reference to the region description in the string pool. public int DescriptionId { get; set; } Property Value int Items Gets or sets the list of indices referencing items found in this region. public List<int> Items { get; set; } Property Value List<int> Locations Gets or sets the list of locations within this region. public List<Location> Locations { get; set; } Property Value List<Location> NPCs Gets or sets the list of indices referencing NPCs present in this region. public List<int> NPCs { get; set; } Property Value List<int> NameId Gets or sets the ID reference to the region name in the string pool. public int NameId { get; set; } Property Value int Position Gets or sets the 2D position of this region in the world. public Vector2 Position { get; set; } Property Value Vector2 Routes Gets or sets the dictionary mapping region indices to their route points. public Dictionary<int, List<RoutePoint>> Routes { get; set; } Property Value Dictionary<int, List<RoutePoint>>"
  },
  "api/RPG.Header.html": {
    "href": "api/RPG.Header.html",
    "title": "Class Header | Your Documentation",
    "keywords": "Class Header Namespace RPG Assembly RPG.dll Represents the header information for a generated world file. public class Header Inheritance object Header Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties CreatedAt Gets or sets the creation timestamp of the world. public DateTime CreatedAt { get; set; } Property Value DateTime Description Gets or sets the description of the world. public string Description { get; set; } Property Value string ItemCount Gets or sets the total number of items in the world. public int ItemCount { get; set; } Property Value int Magic Gets or sets the magic number identifying the file format. public string Magic { get; set; } Property Value string NPCCount Gets or sets the total number of NPCs in the world. public int NPCCount { get; set; } Property Value int Name Gets or sets the name of the world. public string Name { get; set; } Property Value string RegionCount Gets or sets the total number of regions in the world. public int RegionCount { get; set; } Property Value int Version Gets or sets the version of the world format. public string Version { get; set; } Property Value string"
  },
  "api/RPG.Item.html": {
    "href": "api/RPG.Item.html",
    "title": "Class Item | Your Documentation",
    "keywords": "Class Item Namespace RPG Assembly RPG.dll Represents an item in the game world with its properties and statistics. public class Item Inheritance object Item Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties DescriptionId Gets or sets the ID reference to the item's description in the string pool. public int DescriptionId { get; set; } Property Value int NameId Gets or sets the ID reference to the item's name in the string pool. public int NameId { get; set; } Property Value int Stats Gets or sets the statistics and attributes of the item. public ItemStats Stats { get; set; } Property Value ItemStats"
  },
  "api/RPG.ItemStats.html": {
    "href": "api/RPG.ItemStats.html",
    "title": "Class ItemStats | Your Documentation",
    "keywords": "Class ItemStats Namespace RPG Assembly RPG.dll Represents the statistical properties of an item in the game world. public class ItemStats Inheritance object ItemStats Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties Durability Gets or sets the durability rating of the item. public int Durability { get; set; } Property Value int Type Gets or sets the categorical type of the item. public ItemType Type { get; set; } Property Value ItemType Value Gets or sets the monetary value of the item. public int Value { get; set; } Property Value int Weight Gets or sets the weight of the item in arbitrary units. public int Weight { get; set; } Property Value int"
  },
  "api/RPG.ItemType.html": {
    "href": "api/RPG.ItemType.html",
    "title": "Enum ItemType | Your Documentation",
    "keywords": "Enum ItemType Namespace RPG Assembly RPG.dll Defines the different types of items that can exist in the game world. public enum ItemType Fields Armor = 1 Represents items that can be equipped for protection. Consumable = 2 Represents items that can be used once for their effects. Misc = 4 Represents miscellaneous items that don't fit other categories. Quest = 3 Represents items that are related to quests or missions. Weapon = 0 Represents items that can be used to deal damage."
  },
  "api/RPG.LocalizationManager.html": {
    "href": "api/RPG.LocalizationManager.html",
    "title": "Class LocalizationManager | Your Documentation",
    "keywords": "Class LocalizationManager Namespace RPG Assembly RPG.dll Manages localization of strings in the game. public class LocalizationManager Inheritance object LocalizationManager Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors LocalizationManager() Initialises a new instance of the LocalizationManager class. public LocalizationManager() Properties CurrentCulture The current culture of the game. public required CultureInfo CurrentCulture { get; set; } Property Value CultureInfo Methods GetAvailableLanguages() Gets the available languages for the game. public static IEnumerable<CultureInfo> GetAvailableLanguages() Returns IEnumerable<CultureInfo> An enumerable of available languages. GetString(string, params object[]) Gets a localized string from the resource file. public string GetString(string key, params object[] args) Parameters key string The key of the string to get. args object[] Optional arguments to format the string. Returns string The localized string. SetLanguage(string) Sets the current language of the game. public void SetLanguage(string cultureName) Parameters cultureName string The name of the culture to set. Events LanguageChanged Event that is triggered when the language is changed. public event Action<string>? LanguageChanged Event Type Action<string>"
  },
  "api/RPG.Location.html": {
    "href": "api/RPG.Location.html",
    "title": "Class Location | Your Documentation",
    "keywords": "Class Location Namespace RPG Assembly RPG.dll Represents a location within a region in the world. public class Location Inheritance object Location Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties DescriptionId Gets or sets the ID reference to the location description in the string pool. public int DescriptionId { get; set; } Property Value int Items Gets or sets the list of indices referencing items found at this location. public List<int> Items { get; set; } Property Value List<int> NPCs Gets or sets the list of indices referencing NPCs present at this location. public List<int> NPCs { get; set; } Property Value List<int> NameId Gets or sets the ID reference to the location name in the string pool. public int NameId { get; set; } Property Value int TypeId Gets or sets the ID reference to the location type in the string pool. public int TypeId { get; set; } Property Value int"
  },
  "api/RPG.LocationConfig.html": {
    "href": "api/RPG.LocationConfig.html",
    "title": "Class LocationConfig | Your Documentation",
    "keywords": "Class LocationConfig Namespace RPG Assembly RPG.dll Represents the configuration for a location in the world. public class LocationConfig Inheritance object LocationConfig Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties Description Gets or sets the description of the location. public string Description { get; set; } Property Value string Items Gets or sets the list of items at the location. public List<string> Items { get; set; } Property Value List<string> NPCs Gets or sets the list of NPCs at the location. public List<string> NPCs { get; set; } Property Value List<string> Name Gets or sets the name of the location. public string Name { get; set; } Property Value string Type Gets or sets the type of the location. public string Type { get; set; } Property Value string"
  },
  "api/RPG.OptimizedWorldBuilder.html": {
    "href": "api/RPG.OptimizedWorldBuilder.html",
    "title": "Class OptimizedWorldBuilder | Your Documentation",
    "keywords": "Class OptimizedWorldBuilder Namespace RPG Assembly RPG.dll Configuration for the world generation process. public class OptimizedWorldBuilder Inheritance object OptimizedWorldBuilder Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Remarks Initialises a new instance of the OptimizedWorldBuilder class. Constructors OptimizedWorldBuilder(string, WorldConfig) Configuration for the world generation process. public OptimizedWorldBuilder(string outputPath, WorldConfig sourceConfig) Parameters outputPath string The output directory for the generated world data. sourceConfig WorldConfig The source configuration for the world generation. Remarks Initialises a new instance of the OptimizedWorldBuilder class. Methods Build() Builds the world data from the source configuration. public void Build()"
  },
  "api/RPG.ProceduralWorldGenerator.html": {
    "href": "api/RPG.ProceduralWorldGenerator.html",
    "title": "Class ProceduralWorldGenerator | Your Documentation",
    "keywords": "Class ProceduralWorldGenerator Namespace RPG Assembly RPG.dll Represents the configuration for a generated world. public class ProceduralWorldGenerator Inheritance object ProceduralWorldGenerator Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors ProceduralWorldGenerator(int, int, int) Initialises a new instance of the ProceduralWorldGenerator class. public ProceduralWorldGenerator(int seed = 0, int width = 100, int height = 100) Parameters seed int The seed value for the random number generator. width int The width of the generated world. height int The height of the generated world. Methods GenerateWorld() Generates a new world configuration based on the current settings. public WorldConfig GenerateWorld() Returns WorldConfig A new WorldConfig instance representing the generated world."
  },
  "api/RPG.Program.html": {
    "href": "api/RPG.Program.html",
    "title": "Class Program | Your Documentation",
    "keywords": "Class Program Namespace RPG Assembly RPG.dll The main entry class for the application. public static class Program Inheritance object Program Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods Main() The main entry point for the application. public static Task Main() Returns Task A task that represents the asynchronous operation. See Also Task"
  },
  "api/RPG.Rectangle.html": {
    "href": "api/RPG.Rectangle.html",
    "title": "Struct Rectangle | Your Documentation",
    "keywords": "Struct Rectangle Namespace RPG Assembly RPG.dll Represents an immutable rectangular area defined by its position and dimensions. public readonly struct Rectangle Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Constructors Rectangle(int, int, int, int) Represents an immutable rectangular area defined by its position and dimensions. public Rectangle(int x, int y, int width, int height) Parameters x int The X-coordinate of the rectangle's top-left corner. y int The Y-coordinate of the rectangle's top-left corner. width int The width of the rectangle. height int The height of the rectangle. Properties Height Gets the height of the rectangle, ensuring it is never negative. public int Height { get; } Property Value int Width Gets the width of the rectangle, ensuring it is never negative. public int Width { get; } Property Value int X Gets the X-coordinate of the rectangle's top-left corner. public int X { get; } Property Value int Y Gets the Y-coordinate of the rectangle's top-left corner. public int Y { get; } Property Value int Methods Intersects(Rectangle) Determines whether this rectangle intersects with another rectangle. public bool Intersects(Rectangle other) Parameters other Rectangle The rectangle to test for intersection. Returns bool True if the rectangles intersect; otherwise, false."
  },
  "api/RPG.Region.html": {
    "href": "api/RPG.Region.html",
    "title": "Class Region | Your Documentation",
    "keywords": "Class Region Namespace RPG Assembly RPG.dll Represents a rectangular region within a console window that can display content with borders and titles. public class Region Inheritance object Region Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties BorderColor Gets or sets the colour of the region's border. public ConsoleColor BorderColor { get; set; } Property Value ConsoleColor Bounds Gets the outer bounds of the region, including its borders. public Rectangle Bounds { get; } Property Value Rectangle ContentBounds Gets the inner bounds of the region where content can be rendered, excluding borders and title area. public Rectangle ContentBounds { get; } Property Value Rectangle Height Gets or sets the total height of the region, including borders. public int Height { get; set; } Property Value int IsVisible Gets or sets whether the region should be visible when rendered. public bool IsVisible { get; set; } Property Value bool Name Gets or sets the optional title text displayed at the top of the region. public string? Name { get; set; } Property Value string Padding Gets or sets the padding between the region's border and its content. public int Padding { get; set; } Property Value int RenderContent Gets or sets the delegate responsible for rendering the region's content. public Action<Region>? RenderContent { get; set; } Property Value Action<Region> TitleColor Gets or sets the colour of the region's title text. public ConsoleColor TitleColor { get; set; } Property Value ConsoleColor Width Gets or sets the total width of the region, including borders. public int Width { get; set; } Property Value int X Gets or sets the X-coordinate of the region's top-left corner. public int X { get; set; } Property Value int Y Gets or sets the Y-coordinate of the region's top-left corner. public int Y { get; set; } Property Value int ZIndex Gets or sets the Z-index which determines the drawing order when regions overlap. public int ZIndex { get; set; } Property Value int"
  },
  "api/RPG.RegionConfig.html": {
    "href": "api/RPG.RegionConfig.html",
    "title": "Class RegionConfig | Your Documentation",
    "keywords": "Class RegionConfig Namespace RPG Assembly RPG.dll Represents the configuration for a region in the world. public class RegionConfig Inheritance object RegionConfig Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties Connections Gets or sets the list of connections to other regions. public List<string> Connections { get; set; } Property Value List<string> Description Gets or sets the description of the region. public string Description { get; set; } Property Value string Items Gets or sets the list of items in the region. public List<string> Items { get; set; } Property Value List<string> Locations Gets or sets the list of locations in the region. public List<LocationConfig> Locations { get; set; } Property Value List<LocationConfig> NPCs Gets or sets the list of NPCs in the region. public List<string> NPCs { get; set; } Property Value List<string> Name Gets or sets the name of the region. public string Name { get; set; } Property Value string Routes Gets or sets the list of routes to other regions. public Dictionary<string, List<RoutePoint>> Routes { get; set; } Property Value Dictionary<string, List<RoutePoint>>"
  },
  "api/RPG.ResourceTable.html": {
    "href": "api/RPG.ResourceTable.html",
    "title": "Class ResourceTable | Your Documentation",
    "keywords": "Class ResourceTable Namespace RPG Assembly RPG.dll Contains resource mappings and shared data for the world. public class ResourceTable Inheritance object ResourceTable Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties SharedDialogue Collection of common dialogue lines shared across NPCs. public List<string> SharedDialogue { get; set; } Property Value List<string> SoundRefs Maps sound effect names to their resource identifiers. public Dictionary<string, int> SoundRefs { get; set; } Property Value Dictionary<string, int> StringPool Maps strings to their unique integer identifiers. public Dictionary<string, int> StringPool { get; set; } Property Value Dictionary<string, int> TextureRefs Maps texture names to their resource identifiers. public Dictionary<string, int> TextureRefs { get; set; } Property Value Dictionary<string, int>"
  },
  "api/RPG.RoutePoint.html": {
    "href": "api/RPG.RoutePoint.html",
    "title": "Class RoutePoint | Your Documentation",
    "keywords": "Class RoutePoint Namespace RPG Assembly RPG.dll Represents a point along a route between regions. public class RoutePoint Inheritance object RoutePoint Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties Description Gets or sets the list of landmarks at the route point. public string Description { get; set; } Property Value string DescriptionId Gets or sets the description of the route point. public int DescriptionId { get; set; } Property Value int Directions Gets or sets the directions at the route point. public string Directions { get; set; } Property Value string DirectionsId Gets or sets the directions at the route point. public int DirectionsId { get; set; } Property Value int Landmarks Gets or sets the list of landmarks at the route point. public List<LocationConfig> Landmarks { get; set; } Property Value List<LocationConfig>"
  },
  "api/RPG.SaveData.html": {
    "href": "api/RPG.SaveData.html",
    "title": "Class SaveData | Your Documentation",
    "keywords": "Class SaveData Namespace RPG Assembly RPG.dll Represents save data for the game state public class SaveData Inheritance object SaveData Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties CurrentRegionId Gets or sets the current region identifier public string CurrentRegionId { get; set; } Property Value string Description Gets the formatted description of the save state [JsonIgnore] public string Description { get; } Property Value string DisplayName Gets the formatted display name for the save file [JsonIgnore] public string DisplayName { get; } Property Value string GameFlags Gets or sets the game state flags public Dictionary<string, bool> GameFlags { get; set; } Property Value Dictionary<string, bool> Gold Gets or sets the amount of gold public int Gold { get; set; } Property Value int HP Gets or sets the current hit points public int HP { get; set; } Property Value int Inventory Gets or sets the player's inventory items public List<string> Inventory { get; set; } Property Value List<string> LastPlayTime Gets or sets the last play session timestamp public DateTime LastPlayTime { get; set; } Property Value DateTime Level Gets or sets the player's level public int Level { get; set; } Property Value int MaxHP Gets or sets the maximum hit points public int MaxHP { get; set; } Property Value int PlayerName Gets or sets the player's name public string PlayerName { get; set; } Property Value string SaveTime Gets or sets the time when the game was saved public DateTime SaveTime { get; set; } Property Value DateTime Stats Gets or sets the player's statistics public Dictionary<string, int> Stats { get; set; } Property Value Dictionary<string, int> TotalPlayTime Gets or sets the total time played public TimeSpan TotalPlayTime { get; set; } Property Value TimeSpan WorldPath Gets or sets the path to the world data public string WorldPath { get; set; } Property Value string Methods UpdatePlayTime() Updates the total play time based on the last play session public void UpdatePlayTime()"
  },
  "api/RPG.SaveInfo.html": {
    "href": "api/RPG.SaveInfo.html",
    "title": "Class SaveInfo | Your Documentation",
    "keywords": "Class SaveInfo Namespace RPG Assembly RPG.dll Represents a save file. public class SaveInfo Inheritance object SaveInfo Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties FilePath The file path of the save. public string FilePath { get; set; } Property Value string IsAutosave Whether this save is an autosave. public bool IsAutosave { get; set; } Property Value bool Metadata The save metadata. public SaveMetadata Metadata { get; set; } Property Value SaveMetadata Slot The save slot. public string Slot { get; set; } Property Value string Methods Deconstruct(out string, out SaveData) Deconstructs the save info into its components. public void Deconstruct(out string slot, out SaveData data) Parameters slot string The save slot. data SaveData The save data."
  },
  "api/RPG.SaveManager.html": {
    "href": "api/RPG.SaveManager.html",
    "title": "Class SaveManager | Your Documentation",
    "keywords": "Class SaveManager Namespace RPG Assembly RPG.dll Manages saving and loading game data to disk. public static class SaveManager Inheritance object SaveManager Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods CreateAutosave(SaveData) Creates an autosave from the current game data. public static void CreateAutosave(SaveData saveData) Parameters saveData SaveData The game data to save. DeleteSave(string, bool) Deletes a save file. public static void DeleteSave(string slot, bool isAutosave = false) Parameters slot string The save slot to delete. isAutosave bool Whether to delete an autosave. GetSaveFiles(bool) Gets a list of save files. public static List<SaveInfo> GetSaveFiles(bool includeAutosaves = true) Parameters includeAutosaves bool Whether to include autosaves in the list. Returns List<SaveInfo> A list of save files. Load(string, bool) Loads the game data from disk. public static (SaveMetadata? Metadata, SaveData? Data) Load(string slot, bool isAutosave = false) Parameters slot string The save slot to load. isAutosave bool Whether to load an autosave. Returns (SaveMetadata Metadata, SaveData Data) A tuple containing the save metadata and data. RestoreBackup(string, int) Restores a backup to the main save file. public static bool RestoreBackup(string slot, int backupIndex) Parameters slot string The save slot to restore. backupIndex int The index of the backup to restore. Returns bool True if the backup was restored successfully. Save(SaveData, string, bool) Saves the game data to disk. public static void Save(SaveData saveData, string slot, bool isAutosave = false) Parameters saveData SaveData The game data to save. slot string The save slot to use. isAutosave bool Whether this save is an autosave. SaveExists(string, bool) Checks if a save file exists in the specified slot. public static bool SaveExists(string slot, bool isAutosave = false) Parameters slot string The save slot to check. isAutosave bool Whether to check for an autosave. Returns bool True if a save file exists in the slot; otherwise, false."
  },
  "api/RPG.SaveMetadata.html": {
    "href": "api/RPG.SaveMetadata.html",
    "title": "Class SaveMetadata | Your Documentation",
    "keywords": "Class SaveMetadata Namespace RPG Assembly RPG.dll Represents metadata for a save file. public class SaveMetadata Inheritance object SaveMetadata Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties CharacterLevel The level of the last played character. public int CharacterLevel { get; set; } Property Value int CustomData Custom data for the save. public Dictionary<string, string> CustomData { get; set; } Property Value Dictionary<string, string> LastPlayedCharacter The name of the last played character. public string LastPlayedCharacter { get; set; } Property Value string SaveTime The time the save was created. public DateTime SaveTime { get; set; } Property Value DateTime SaveType The type of save. public SaveType SaveType { get; set; } Property Value SaveType TotalPlayTime The total play time of the save. public TimeSpan TotalPlayTime { get; set; } Property Value TimeSpan Version Version of the save file format. public int Version { get; set; } Property Value int WorldPath The path to the world file. public string WorldPath { get; set; } Property Value string"
  },
  "api/RPG.SaveType.html": {
    "href": "api/RPG.SaveType.html",
    "title": "Enum SaveType | Your Documentation",
    "keywords": "Enum SaveType Namespace RPG Assembly RPG.dll Represents the type of save. public enum SaveType Fields Autosave = 1 Autosave. Manual = 0 Manual save. Quicksave = 2 Quicksave."
  },
  "api/RPG.Vector2.html": {
    "href": "api/RPG.Vector2.html",
    "title": "Class Vector2 | Your Documentation",
    "keywords": "Class Vector2 Namespace RPG Assembly RPG.dll Represents a two-dimensional vector with X and Y coordinates. public class Vector2 Inheritance object Vector2 Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties X Gets or sets the X coordinate of the vector. public float X { get; set; } Property Value float Y Gets or sets the Y coordinate of the vector. public float Y { get; set; } Property Value float"
  },
  "api/RPG.WorldConfig.html": {
    "href": "api/RPG.WorldConfig.html",
    "title": "Class WorldConfig | Your Documentation",
    "keywords": "Class WorldConfig Namespace RPG Assembly RPG.dll Represents the configuration for a generated world. public class WorldConfig Inheritance object WorldConfig Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties Description Gets or sets the description of the world. public string Description { get; set; } Property Value string Items Gets or sets the list of items in the world. public List<string> Items { get; set; } Property Value List<string> NPCs Gets or sets the list of NPCs in the world. public List<string> NPCs { get; set; } Property Value List<string> Name Gets or sets the name of the world. public string Name { get; set; } Property Value string Regions Gets or sets the list of regions in the world. public List<RegionConfig> Regions { get; set; } Property Value List<RegionConfig>"
  },
  "api/RPG.WorldData.html": {
    "href": "api/RPG.WorldData.html",
    "title": "Class WorldData | Your Documentation",
    "keywords": "Class WorldData Namespace RPG Assembly RPG.dll Contains all data related to the game world public class WorldData Inheritance object WorldData Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties Header Gets or sets the header information public Header Header { get; set; } Property Value Header Items Gets or sets the list of items in the world public List<Item> Items { get; set; } Property Value List<Item> NPCs Gets or sets the list of NPCs in the world public List<Entity> NPCs { get; set; } Property Value List<Entity> Regions Gets or sets the list of world regions public List<WorldRegion> Regions { get; set; } Property Value List<WorldRegion> Resources Gets or sets the resource table public ResourceTable Resources { get; set; } Property Value ResourceTable"
  },
  "api/RPG.WorldLoader.html": {
    "href": "api/RPG.WorldLoader.html",
    "title": "Class WorldLoader | Your Documentation",
    "keywords": "Class WorldLoader Namespace RPG Assembly RPG.dll Loads and provides access to world data from a compressed JSON file. public class WorldLoader Inheritance object WorldLoader Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors WorldLoader(string) Initialises a new instance of the WorldLoader class. public WorldLoader(string worldPath) Parameters worldPath string The path to the compressed world data file. Methods GetConnectedRegions(WorldRegion) Gets the region with the specified ID. public IEnumerable<WorldRegion> GetConnectedRegions(WorldRegion region) Parameters region WorldRegion The ID of the region to get. Returns IEnumerable<WorldRegion> The region with the specified ID, or null if not found. GetEntityName(Entity) Gets the name of the specified entity. public string GetEntityName(Entity entity) Parameters entity Entity The entity to get the name for. Returns string The name of the entity. GetItemDescription(Item) Gets the description of the specified item. public string GetItemDescription(Item item) Parameters item Item The item to get the description for. Returns string The description of the item. GetItemName(Item) Gets the name of the specified item. public string GetItemName(Item item) Parameters item Item The item to get the name for. Returns string The name of the item. GetItemsInLocation(Location) Gets all items within the specified location. public List<Item> GetItemsInLocation(Location location) Parameters location Location The location to get items from. Returns List<Item> A list of items within the specified location. GetItemsInRegion(WorldRegion) Gets all items within the specified region. public IEnumerable<Item> GetItemsInRegion(WorldRegion region) Parameters region WorldRegion The region to get items from. Returns IEnumerable<Item> A collection of items within the specified region. GetLocationByName(WorldRegion, string) Gets a location in the specified region by its name. public Location? GetLocationByName(WorldRegion region, string name) Parameters region WorldRegion The region to search for the location. name string The name of the location to find. Returns Location The location with the specified name, or null if not found. GetLocationDescription(Location) Gets the description of the specified location. public string GetLocationDescription(Location location) Parameters location Location The location to get the description for. Returns string A string containing the location's description and type. GetLocationName(Location) Gets the name of the specified location. public string GetLocationName(Location location) Parameters location Location The location to get the name for. Returns string The name of the location. GetLocationsInRegion(WorldRegion) Gets all locations within the specified region. public static IEnumerable<Location> GetLocationsInRegion(WorldRegion region) Parameters region WorldRegion The region to get locations from. Returns IEnumerable<Location> A collection of locations within the specified region. GetNPCDialogue(Entity) Gets a random dialogue line for the specified NPC. public string GetNPCDialogue(Entity npc) Parameters npc Entity The NPC to get dialogue for. Returns string A dialogue string, or \"...\" if the NPC has no dialogue. GetNPCsInLocation(Location) Gets all NPCs within the specified location. public List<Entity> GetNPCsInLocation(Location location) Parameters location Location The location to get NPCs from. Returns List<Entity> A list of NPCs within the specified location. GetNPCsInRegion(WorldRegion) Gets all NPCs within the specified region. public IEnumerable<Entity> GetNPCsInRegion(WorldRegion region) Parameters region WorldRegion The region to get NPCs from. Returns IEnumerable<Entity> A collection of NPCs within the specified region. GetRegionByName(string) Gets the region with the specified name. public WorldRegion? GetRegionByName(string name) Parameters name string The name of the region to get. Returns WorldRegion The region with the specified name, or null if not found. GetRegionDescription(WorldRegion) Gets the description of the specified region. public string GetRegionDescription(WorldRegion region) Parameters region WorldRegion The region to get the description for. Returns string The description of the region. GetRegionName(WorldRegion) Gets the name of the specified region. public string GetRegionName(WorldRegion region) Parameters region WorldRegion The region to get the name for. Returns string The name of the region. GetRoute(WorldRegion, WorldRegion) Gets the route points for traveling between two regions. public List<RoutePoint> GetRoute(WorldRegion from, WorldRegion to) Parameters from WorldRegion The starting region. to WorldRegion The destination region. Returns List<RoutePoint> A list of route points describing the path between regions, or an empty list if no route exists. GetRouteDescription(RoutePoint) Gets the description of the specified route point. public string GetRouteDescription(RoutePoint point) Parameters point RoutePoint The route point to get the description for. Returns string The description of the route point. GetRouteDirections(RoutePoint) Gets the directions for the specified route point. public string GetRouteDirections(RoutePoint point) Parameters point RoutePoint The route point to get the directions for. Returns string The directions for the route point. GetRouteLandmarks(RoutePoint) Gets the landmarks associated with the specified route point. public IEnumerable<Location> GetRouteLandmarks(RoutePoint point) Parameters point RoutePoint The route point to get landmarks for. Returns IEnumerable<Location> A collection of locations representing landmarks along the route. GetStartingRegion() Gets the starting region for the game. public WorldRegion? GetStartingRegion() Returns WorldRegion The starting region for the game. GetString(int) Gets the string with the specified ID. public string GetString(int id) Parameters id int The ID of the string to get. Returns string The string with the specified ID, or a placeholder if not found. GetWorldData() Gets the world data loaded by this instance. public WorldData GetWorldData() Returns WorldData The world data loaded by this instance. LocationNameMatches(Location, string) Checks if the location's name matches the specified name. public bool LocationNameMatches(Location location, string name) Parameters location Location The location to check. name string The name to compare against. Returns bool true if the names match (case-insensitive), otherwise false."
  },
  "api/RPG.WorldRegion.html": {
    "href": "api/RPG.WorldRegion.html",
    "title": "Class WorldRegion | Your Documentation",
    "keywords": "Class WorldRegion Namespace RPG Assembly RPG.dll Represents a region in the game world with its properties and connections public class WorldRegion Inheritance object WorldRegion Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties Connections Gets or sets the list of connected region identifiers public List<int> Connections { get; set; } Property Value List<int> DescriptionId Gets or sets the identifier for the region description public int DescriptionId { get; set; } Property Value int Items Gets or sets the list of item identifiers in this region public List<int> Items { get; set; } Property Value List<int> Locations Gets or sets the list of locations within this region public List<Location> Locations { get; set; } Property Value List<Location> NPCs Gets or sets the list of NPC identifiers in this region public List<int> NPCs { get; set; } Property Value List<int> NameId Gets or sets the identifier for the region name public int NameId { get; set; } Property Value int Position Gets or sets the position of this region in the world public Vector2 Position { get; set; } Property Value Vector2 Routes Gets or sets the dictionary of routes in this region public Dictionary<int, List<RoutePoint>> Routes { get; set; } Property Value Dictionary<int, List<RoutePoint>>"
  },
  "api/RPG.html": {
    "href": "api/RPG.html",
    "title": "Namespace RPG | Your Documentation",
    "keywords": "Namespace RPG Classes CommandHandler Handles commands for the game. ConsoleBuffer Represents a buffer for managing console output with character and color information. ConsoleDisplayConfig Configuration for ConsoleWindowManager display settings. ConsoleWindowManager Represents a region within a console window that can display content with borders and titles. Entity Represents an entity in the game world, such as an NPC or creature. EntityStats Represents the base statistics for an entity in the game world. GameSettings Game settings for the RPG game. GameState Manages the state of the game world. GenWorldRegion Represents a region in the generated world with its properties and connections. Header Represents the header information for a generated world file. Item Represents an item in the game world with its properties and statistics. ItemStats Represents the statistical properties of an item in the game world. LocalizationManager Manages localization of strings in the game. Location Represents a location within a region in the world. LocationConfig Represents the configuration for a location in the world. OptimizedWorldBuilder Configuration for the world generation process. ProceduralWorldGenerator Represents the configuration for a generated world. Program The main entry class for the application. Region Represents a rectangular region within a console window that can display content with borders and titles. RegionConfig Represents the configuration for a region in the world. ResourceTable Contains resource mappings and shared data for the world. RoutePoint Represents a point along a route between regions. SaveData Represents save data for the game state SaveInfo Represents a save file. SaveManager Manages saving and loading game data to disk. SaveMetadata Represents metadata for a save file. Vector2 Represents a two-dimensional vector with X and Y coordinates. WorldConfig Represents the configuration for a generated world. WorldData Contains all data related to the game world WorldLoader Loads and provides access to world data from a compressed JSON file. WorldRegion Represents a region in the game world with its properties and connections Structs ColoredText Represents a colored text entry in the game log. Rectangle Represents an immutable rectangular area defined by its position and dimensions. Enums ItemType Defines the different types of items that can exist in the game world. SaveType Represents the type of save."
  },
  "index.html": {
    "href": "index.html",
    "title": "RPG Documentation | Your Documentation",
    "keywords": "RPG Documentation Welcome to the RPG project documentation. Quick Links API Documentation User Guides Getting Started This documentation includes both API reference and conceptual documentation."
  }
}